% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rss.R
\name{rss}
\alias{rss}
\title{Robust subset selection}
\usage{
rss(
  X,
  y,
  k = (!int):min(nrow(X) - int, ncol(X), 20),
  h = floor(seq(0.75, 1, 0.05) * nrow(X)),
  int = T,
  mio = T,
  ...
)
}
\arguments{
\item{X}{a matrix of predictors}

\item{y}{a vector of the response}

\item{k}{the number of predictors to minimise sum of squares over; by default a sequence from 0
to 20}

\item{h}{the number of observations to minimise sum of squares over; by default a sequence from
75 to 100 percent of sample size (in increments of 5 percent)}

\item{int}{a logical indicating whether to include an intercept}

\item{mio}{a logical indicating whether to run the mixed-integer solver}

\item{...}{any other arguments (see \code{rss.fit} and \code{rss.cv})}
}
\value{
An object of class \code{rss}; a list with the following components:
\item{cv}{the output from \code{rss.cv}; see documentation}
\item{fit}{the output from \code{rss.fit}; see documentation}
}
\description{
Fits a sequence of robust subset selection models and cross-validates the prediction
error from these models.
}
\details{
This function fits a sequence of models and cross-validates the prediction
error associated with these models. In the interest of speed, these steps are carried out using
heuristic optimisation methods. The parameters that produce the lowest cv error are run through
the mixed-integer solver which (given sufficient time) will find a global minimiser. \cr
See \code{rss.fit} and \code{rss.cv} for further options controlling the model fit and
cross-validation.
}
\examples{
# Set simulation parameters
set.seed(1)
n <- 100
p <- 10
p0 <- 5
n.c <- 10

# Generate training data with mixture error
beta <- c(rep(1, p0), rep(0, p - p0))
X <- matrix(rnorm(n * p), n, p)
e <- rnorm(n, c(rep(10, n.c), rep(0, n - n.c)))
y <- X \%*\% beta + e

# Fit best/robust subset selection models
fit.bss <- bss(X, y, n.cores = 1)
fit.rss <- rss(X, y, n.cores = 1)

# Extract model coefficients
bss.beta <- coef(fit.bss)
rss.beta <- coef(fit.rss)

# Check estimation error
ee.bss <- norm(bss.beta - c(0, beta), '2')
ee.rss <- norm(rss.beta - c(0, beta), '2')
cat('Best subsets estimation error:', ee.bss, '\n')
cat('Robust subsets estimation error:', ee.rss, '\n')

# Plot coefficient profiles
plot(fit.rss, type = 'profile')
# Each facet corresponds to a different value of h

# Plot cross-validation results
plot(fit.rss, type = 'cv')
# Each line corresponds to a different value of h

# Generate test data
X.test <- matrix(rnorm(n * p), n, p)
e.test <- rnorm(n)
y.test <- X.test \%*\% beta + e.test

# Make model predictions (using best parameters from cv)
pred.bss <- predict(fit.bss, X.test)
pred.rss <- predict(fit.rss, X.test)

# Compute prediction error
pe.bss <- 1 / n * norm(y.test - pred.bss, '2') ^ 2
pe.rss <- 1 / n * norm(y.test - pred.rss, '2') ^ 2
cat('Best subsets prediction error:', pe.bss, '\n')
cat('Robust subsets prediction error:', pe.rss, '\n')

}
\author{
Ryan Thompson <ryan.thompson@monash.edu>
}
